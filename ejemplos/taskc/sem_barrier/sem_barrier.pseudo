procedure main:
  // How many threads have arrived to the barrier
  shared count := 0
  // Protects the increment of the count
  shared can_access_count := create_semaphore(1)
  // Locked (0) until all threads arrive, then it is unlocked (1)
  shared barrier := create_semaphore(0)
  // Read thread count from standard input
  shared constant thread_count = read_integer()
  // Create a thread team running secondary
  create_threads(thread_count, secondary)
end procedure

procedure secondary:
  Statement A
  // Adapt rendezvous solution here
  wait(can_access_count)
    count := count + 1
    // If I am the last thread in the team that arrives to the rendezvous
    if count = thread_count then
      for index := 0 to thread_count do
        signal(barrier) // Unlock the barrier for all threads
      end for
    end if
  signal(can_access_count) // Release the lock on the count
  // Statement B can be only executed until all threads have run Statement A
  wait(barrier) // Wait until all threads have run Statement A
  Statement B // All threads execute this statement at the same time
end procedure
