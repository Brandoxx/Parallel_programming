procedure main:
  // How many threads have arrived to the barrier
  shared count := 0
  // Protects the increment of the count
  shared can_access_count := create_semaphore(1)
  // Locked (0) until all threads arrive, then it is unlocked (1)
  shared turnstile1 := create_semaphore(0) // initially locked
  shared turnstile2 := create_semaphore(1) // Unlocked  
  // Read thread count from standard input
  shared constant thread_count = read_integer()
  // Create a thread team running secondary
  create_threads(thread_count, secondary)
end procedure
// We kinda have to repeat the code for the barrier, but it's not that much
procedure secondary:
  while true do
    Statement A 

    // Adapt rendezvous solution here
    wait(can_access_count) // lock access to count
      count := count + 1 // increment count 
      // If I am the last thread in the team that arrives to the rendezvous
      if count = thread_count then 
        wait(turnstile2) // Lock turnstile2
        signal(turnstile1) // Unlock turnstile1
      end if
    signal(can_access_count) // unlock access to count
    // Statement B can be only executed until all threads have run Statement A
    wait(turnstile1) // Lock turnstile1 
    signal(turnstile1) // Unlock turnstile1 

    Statement B //Whatever you want to do here

    wait(can_access_count) // lock access to count
      count := count - 1
      // If I am the last thread in the team that arrives to the rendezvous
      if count = 0 then 
        wait(turnstile1) // Lock turnstile1
        signal(turnstile2) // Unlock turnstile2
      end if
    signal(can_access_count) // unlock access to count
    // Statement B can be only executed until all threads have run Statement A
    wait(turnstile2) 
    signal(turnstile2)

  end while
end procedure
