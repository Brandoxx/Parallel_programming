// Global constants
process_number    // Number of this process (integer)
process_count     // Number of processes in the team this process belongs to
process_hostname  // Name of the computer where this process is running (text)
any_process       // For accepting messages from any process
any_tag           // For accepting messages classified with any tag

// Send a variable or array (a set of bytes) to the destination process
send(message, count, to_process, tag = 0)
// Receive a set of bytes into a variable from a source process
receive(&message, count, from_process = any_process, tag = any_tag)
// Send a variable or array from the source process to the rest
broadcast(&message, count, from_process)
// Reduce the data value from all processes to a single result value in
// destination process applying the given operation
reduce(data, &result, count, operation, to_process)
// Reduce the data value from all processes to a single result value that will
// be available in all processes
all_reduce(data, &result, count, operation)
// Distributes an array into subsets for each process using block mapping
scatter(entire_array, entire_count, &subset_array, &subset_count, from_process)
// Updates the entire array from the subsets that where assigned to each process
gather(&entire_array, entire_count, subset_array, subset_count, to_process)
// Get the wall time for the calling process
wall_time()
// Make all processes of a team wait until all of them have reached the barrier
wait_barrier()
// we will simulate a game of ping-pong between pair numbers of processes
procedure main(arc, argv):
  int proccess_count;
  int score_to_win := argv[1]  // the number points to win the game
  rational prob_of_hit_1st := argv[2]  // the probability of hitting the ball for the first process
  rational prob_of_hit_2nd := argv[3]  // the probability of hitting the ball for the second process

  create_team_of_processes(process_count)
  if process_count = 2:
    play_ping_pong(number_of_ping_pongs)
  else 
    print "The number of processes must be even"
// rational refers to the mathematical concept of a fraction
procedure play_ping_pong(int process_count, int number_games,
    int score_to_win, rational prob_of_hit_1st, rational prob_of_hit_2nd):

  int previous_process := (process_count + process_number + 1) mod process_count // previous process
  int next_process := (process_number + 1) mod process_count
  int games_won_1st := 0
  int games_won_2nd := 0

  for game := 1 to 3:
    int successful_hit := 0
    int chance := 0
    int points_1st := 0
    int points_2nd := 0
    int number_of_hits := 0
    while true:
      if process_number = 0:
        chance := random(0, 100)
        // can the first process hit the ball?
        if chance <= prob_of_hit_1st:
          successful_hit := 1
        else:
          successful_hit := 0
        end if
        // sending ping
        send(successful_hit, 1, next_process)
        // receiving pong
        receive(&successful_hit, 1, next_process)
        // if we didn't receive the pong, get a point
        if successful_hit = 0:
          points_1st := points_1st + 1
        end if
      // the second process receives
      else:
      // receiving ping
        receive(&successful_hit, 1, previous_process)
        // if we didn't receive the ping, get a point
        if successful_hit = 0:
          points_2nd := points_2nd + 1
        end if
        // can the second process hit the ball?
        chance := random(0, 100)

        if chance <= prob_of_hit_1st:
          successful_hit := 1
        else:
          successful_hit := 0
        end if
        // sending pong
        send(successful_hit, 1, previous_process)
      end if
      // after each hit, update scores between processes by sending them
      number_of_hits := number_of_hits + 1
      if process_number = 1:
        receive(pointsFirst, 1, 0)
        send(pointsSecond, 1, 0)
      else:
        send(pointsFirst, 1)
        receive(pointsSecond, 1)
      end if
   end while 
   // after each game, print the results of the round and update the games won
   // by sending them to the other process
   // process 0 calculates the winner of the game by comparing the points
   int winner := is points_1st < points_2nd ? so 1 : otherwise 0;
   if processNumber = 0:
     print game +": " +numberOfHits+ " " + winner
     if winner = 0:
       games_won_first := games_won_first + 1
     else:
       gamesWonSecond := gamesWonSecond + 1
     end if
   end if
  end for
  if games_won_1st > games_won_2nd:
    print "0 wins 2 to 1"
  else :
    print "1 wins 2 to 1"
  end if
end procedure

