procedure main:
Let Numbers be a dynamic 64-bit unsigned integer array
call read_numbers(Numbers)
Let prime_numbers be a dynamic 64-bit unsigned integer array
call prime_numbers_calculation(max_number)
call goldbach_calculation(Numbers, prime numbers)
call print_numbers (Numbers)
end main

procedure read_numbers (var Numbers: dynamic 64-bit unsigned integer array):
While not end of file:
    if number is not a valid integer
        print error message
        exit
    else
        if number is out of range
            set out of range flag to 1
        if number is negative
            number = -number
            set negative flag to 1
        Let sums be a dynamic 64-bit unsigned integer arrays array
        Add number to Numbers with all flags
end read_numbers

procedure prime_numbers_calculation (var max number: 64-bit integer):
Let prime numbers be a 64 bit unsigned integer array
Let bool be a Boolean array initially set to all true
for i = 2 to sqrt(max number):
    if bool[i] is true
        for j = (i power 2) to max number by i:
            if j is divisible by i
                bool[j] = false
end for
for i=2 to max number
    if bool[i] is true
        add i to prime numbers
end for

end prime_numbers_calculation

procedure goldbach_calculation (var Numbers : dynamic 64-bit unsigned integer array, var prime numbers : dynamic 64-bit unsigned integer array):
for number in Numbers
    if number is even
        goldbach_even_calculation(number, prime numbers)
    else if number is odd
        goldbach_odd_calculation(number, prime numbers) 
end for
end goldbach_calculation

procedure goldbach_even_calculation (var Number : 64-bit integer, var prime numbers : dynamic 64-bit unsigned integer array):
Let primeRange be Number/2
Let firstAddend be 0
Let secondAddend be prime number size
while firstAddend is less than primeRange
    Let sum be firstAddend + secondAddend
    if sum is equal to Number
        if Number is negative
            Add sum to sums with negative flag
        end if
        Number.sumNumber++
        firstAddend increased to next prime number
        secondAddend decreased to next prime number
    else if sum is greater than Number
        secondAddend decreased to next prime number
    else
        firstAddend increased to next prime number
    end if
end while
end even_calculation

procedure goldbach_odd_calculation (var Number : 64-bit integer, var prime numbers : dynamic 64-bit unsigned integer array):
Reset prime numbers repeat counter
for firstPrime = 0 to length(prime numbers)
    if firstPrime is greater than Number
        break
    end if
    Let difference be Number - firstPrime
    Let differenceSums be a dynamic 64-bit unsigned sum array
    Let numberToAdd be a number with differenceSums as an attribute, and 
    difference as a value
    call goldbach_even_calculation(numberToAdd, prime_numbers, firstPrime)
    if Number is negative
        for i = 0 to length(differenceSums)
        if differenceSums[i] has not repeated
            add differenceSums[i] to Numbers addition array
        end if
        end for
    end if
    Number.sumNumber = Number.sumNumber + numberToAdd.sumNumber - firstPrime.timesRepeated
end for

end odd_calculation

procedure print_result (var Numbers : dynamic 64-bit unsigned integer array):
    call print_total_results(Numbers)
    call print_numbers(Numbers)
end print_numbers

procedure print_total_result (var Numbers : dynamic 64-bit unsigned integer array):
Let total be a 64-bit integer initially set to 0
Let total_numbers be a 64-bit integer initially set to Numbers length    
for every number in Numbers
        if number is not out of range
            total = total + Number_sum_number
end for

end print_total_result
procedure print_numbers (var Numbers : dynamic 64-bit unsigned integer array):
for number in Numbers
    print number
    if number is out of range
        print NA
    else if number is negative
        if number is even
            call even_print(number)
        else if number is odd
            call odd_print(number)
    else
        print number of Goldbach additions
end for
end print_numbers

procedure even_print (var Number : 64-bit integer):
for counter = 0 to length(Number addition array)
    print Number addition array[counter][1]
    print +
    print Number addition array[counter][2]
end for
end even_print

procedure odd_print (var Number : 64-bit integer):
for counter = 0 to length(Number addition array)
    print Number addition array[counter][1]
    print +
    print Number addition array[counter][2]
    print +
    print Number addition array[counter][3]
end for
end odd_print